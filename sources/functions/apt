#!/bin/bash
# Functions for more streamlined script interfacing with apt
# Flying_sausages for Swizzin 2020
# GPLv3 Applies

if [[ -z $log ]]; then log="/root/logs/swizzin.log"; fi

#Returns the version of the candidate package to install
function get_candidate_version () {
    package=$1
    echo "$(apt-cache policy ${package} | grep Candidate | awk '{print $2}' | cut -d- -f 1 | cut -d+ -f 1)"
}

# Checks if a package is installed using package manager
# $1 the package to check for
# Returns code 0 in case a package is installed, 1 if missing
_check_installed (){
    if dpkg -s "$1" >> $log 2>&1; then
        return 0
    else 
        return 1
    fi
}

# Check if apt is locked
_check_dpkg_lock (){
    # dpkg -i /dev/zero >> $log 2>&1
    if lsof /var/lib/dpkg/lock >> $log 2>&1; then
        echo "Error: dpkg database is locked. Please try again later" | tee -a $log
        exit 1
    fi
}

# Check if install can run or not
_apt_check (){
    if ! apt-get check >> $log 2>&1; then
        echo "Error: \`apt-get check\` failed, you may have broken packages. Aborting installation" | tee -a $log
        exit 1
    fi
}

#Performing apt update and checking if it succeeded
apt_update () {
    echo "Performing apt update" | tee -a $log
    if apt-get update >> $log 2>&1
    then
        return 0
        # TODO check for Warnings and Errors in the output, as those will still return 0
    else
        echo "Error: \`apt-get update\` failed. Please consult the log." | tee -a $log
        exit 1
    fi
}
export -f apt_update

# Performs an upgrade and checks if it succeeded
apt_upgrade() {
    _check_dpkg_lock
    _apt_check
    apt_update

    # Check if the simulation would be fine 
    if apt-get --simulate upgrade >> $log 2>&1; then
        # echo "we're good"
        :
    else
        echo "Error: The simulation check resulted in an error. Please consult the log. Aborting install" | tee -a $log
        exit 1
    fi

    echo "Performing apt upgrade" | tee -a $log
    apt-get upgrade -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" >> $log 2>&1
    if [[ $? -gt 0 ]]; then
        echo "Error: \`apt-get upgrade\` failed. Please consult log. Aborting installation." | tee -a $log
        exit 1
    fi
}
export -f apt_upgrade

#Takes a space separated list of packages to install in a non-interactive manner
apt_install (){
    packages=("$@")
    _check_dpkg_lock
    _apt_check
    apt_update

    echo "Performing installation of apt packages" | tee -a $log
    # TODO figure out how to properly do this
    echo "(${packages[*]})"
    # Check if the simulation would be fine 
    if apt-get --simulate install "${packages[@]}" >> $log 2>&1; then
        # echo "we're good"
        :
    else
        echo "Error: The simulation check resulted in an error. Please consult the log. Aborting install" | tee -a $log
        exit 1
    fi

    # Run the install
    DEBIAN_FRONTEND=non-interactive apt-get install -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -y "${packages[@]}" >> $log 2>&1
    
    if [[ $? -gt 0 ]]; then
        echo "Error: \`apt-get install\` failed. Please consult log. Aborting installation." | tee -a $log
        exit 1
    fi

    # TODO check if any configs have changed and alert the users
}
export -f apt_install

