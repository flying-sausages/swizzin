#! /bin/bash
# A little tool to help make more stylish bash output with colours and indentation

#Whether or not Warning and Error should trigger the bell
bell=true
#Whether output should be as wide as the terminal.
#Setting to false will still wrap when terminal is less than default width
max_width=false
default_width=140
#Whether the log should keep ansi escape characters or not to ensure human readability
strip_ansi_from_log=false

#colours
    red=$(      tput setaf 1|| tput AF 1    )
    green=$(    tput setaf 2|| tput AF 2    )
    yellow=$(   tput setaf 3|| tput AF 3    )
    blue=$(     tput setaf 4|| tput AF 4    )
    magenta=$(  tput setaf 5|| tput AF 5    )
    cyan=$(     tput setaf 6|| tput AF 6    )

#backgrounds
magentabg="\e[45m"

#reset
nc="$(tput sgr0)"

#mmodifiers
bold=$(     tput bold   || tput md      ) # Start boldrbold="\e[21m"
dim=$(      tput dim                    ) # Start dim
rdim="\e[22m"
under=$(    tput smul   || tput us      ) # Start under
runder=$(   tput rmul   || tput ue      ) # End   under
italic=$(   tput sitm   || tput ZH      ) # Start italic
eitalic=$(  tput ritm   || tput ZR      ) # End   italic
stout=$(    tput smso   || tput so      ) # Start stand-out
estout=$(   tput rmso   || tput se      ) # End stand-out
# resetAllModes="\e[21m\e[22m\e[24m\e[25m\e[27m\e[28m"

ring_the_bell(){
    [[ $bell == "true" ]] && tput bel
}
export -f ring_the_bell

############ FUNCTIONS
# Unless otherwise specified, the following parameters apply:
# $1    the message to print
# $log  (optionally declared outside) the file to log to
echo_warn () {
    ring_the_bell
    colorprint "${yellow}" "${under}WARN${runder}\t$1"
}
export -f echo_warn

echo_error () {
    ring_the_bell
    colorprint "${red}${bold}" "ERROR\t${stout}$1"
}
export -f echo_error


echo_info () {
    colorprint "$bold" "INFO\t$1   "
}
export -f echo_info


echo_progress_start () {
    colorprint "$dim" "...\t$1"
}
export -f echo_progress_start


echo_progress_done () {
    colorprint "${green}${dim}" "\t\u2714   ${italic}$1"
}
export -f echo_progress_done


echo_success () {
    colorprint "${green}" "${bold}SUCCESS\t$1"
}
export -f echo_success


echo_query () {
    colorprint "${blue}${bold}" "INPUT\t${italic}$1"
}
export -f echo_query


#Prints only into the logpath
echo_log_only () {
    colorprint "${magenta}" "LOG\t$1"
}
export -f echo_log_only


# $1 = colour
# $2 = message
# $log = location of the file to log into
function colorprint () {
    # If the optional logfile was specified...
    if [[ -n $log ]]; then
        printf '%b' "${dim}$(LANG=en_US date +"%a %b %d %T")${nc}\t" | strip_ansi >> "$log"
        # ...and if function called was `echo_log_only`, do not print to stdout ad forward straight to file
        # echo "${FUNCNAME[ 1 ]}"
        if [[ ${FUNCNAME[ 1 ]} == "echo_log_only" ]] ;then
            printf '%b\n' "${1}${2}${nc}" | strip_ansi  >> "$log"
        else # otherwise append it
            #Wrapped for the user
            printf '%b\n' "${1}${2}${nc}" | do_the_wrap
            #Unwrapped for the log
            printf '%b\n' "${1}${2}${nc}" | strip_ansi >> "$log"
        fi
    else # If log was not specified...
        printf '%b\n'  "${1}${2}${nc}" | do_the_wrap 
    fi
}
export -f colorprint

#Wraps indents the text according to variables / terminal output
function do_the_wrap () {
    # width to use for folding and wrapping (excludes tab for indentation, subtract 8 char to account for that)
    width=$default_width
    tpwidth=$(tput cols)
    if [[ $tpwidth -lt $width  || $max_width == "true" ]]; then
        width=$(( tpwidth - 12 ))
    fi
    fold -s -w${width} | sed -e '2,$s/^/\t/'
}
export -f do_the_wrap


function strip_ansi () {
    if [[ $strip_ansi_from_log == "true" ]]; then 
        sed 's/\x1B\[[0-9;]\+[A-Za-z]//g'
    else
        less
    fi
}
export -f strip_ansi

function echo_tests () {
    echo_test_basic
    echo
    echo_test_wrap
    echo
    echo_test_log
}

function echo_test_basic () {
    echo "Here are some basic echos"
    echo_success "Installation complete"
    echo_warn "Some hiccups"
    echo_error "wOoopsie fwings awe fucky wucky"
    echo_info "Something of note to user"
    echo_progress_start "Something started";    echo_progress_done "Done message"
    echo_query "Can you tell me this please"
}

function echo_test_wrap () {
    echo -E "Look at this nice wrapping biz going on"
    # Really long text just for illustration.
    # the "<Line Break> is there just to show where the actual escape char is"
    echo "Base string = "
    lipsum="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sodales orci vitae facilisis venenatis. Integer lobortis feugiat viverra. Morbi sit amet quam aliquet, ullamcorper turpis quis, porttitor erat. Nulla quis eleifend nisi.<Line break>\nFusce feugiat rutrum libero ut dictum. Nullam lacus eros, consequat et sem in, suscipit efficitur diam. Proin euismod nisi eu est congue, ut tempor diam gravida. Curabitur sit amet aliquam orci, quis fermentum augue."
    echo -E "$lipsum"
    echo
    echo_success "${lipsum}"
    echo_warn "${lipsum}"
    echo_error "${lipsum}"
    echo_info "${lipsum}"
    echo_progress_start "${lipsum}"
    echo_progress_done "Duis bibendum justo lorem"
    echo_query "${lipsum}"
}

function echo_test_log () {
    echo "And this is what happens when you set the \$log variable. (check source)"
    echo "What the screen sees:"
    log="/tmp/dumblog.txt"
    if [[ -f $log ]]; then rm $log; fi
    echo_info "${lipsum}"
    echo_log_only "${lipsum}"
    echo
    echo "The contents of the log:"
    cat $log
    rm $log
    log=""
}